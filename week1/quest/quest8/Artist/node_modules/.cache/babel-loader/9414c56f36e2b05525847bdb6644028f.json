{"ast":null,"code":"import Grid from './Grid.js';\n\nclass Picture {\n  constructor(pixels, width = null, height = null) {\n    this.pixels = pixels;\n    this.width = width || Grid.columns;\n    this.height = height || Grid.rows;\n  }\n\n  pixelAt(index) {\n    return this.pixels.charAt(index);\n  }\n\n  togglePixelAt(index, brush = null) {\n    let nextPixel = brush;\n\n    if (!brush) {\n      nextPixel = this.pixels[index] === Picture.offPixel ? Picture.onPixel : Picture.offPixel;\n    }\n\n    return new Picture(this.pixels.slice(0, index) + nextPixel + this.pixels.slice(index + 1, this.pixels.length));\n  }\n\n}\n\nPicture.offPixel = '0';\nPicture.onPixel = '1';\nexport default Picture;","map":{"version":3,"sources":["/home/angelica/fastfloward/week1/notes/day4/Artist/src/model/Picture.js"],"names":["Grid","Picture","constructor","pixels","width","height","columns","rows","pixelAt","index","charAt","togglePixelAt","brush","nextPixel","offPixel","onPixel","slice","length"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAK,GAAG,IAAjB,EAAuBC,MAAM,GAAG,IAAhC,EAAsC;AAC/C,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAK,IAAIJ,IAAI,CAACM,OAA3B;AACA,SAAKD,MAAL,GAAcA,MAAM,IAAIL,IAAI,CAACO,IAA7B;AACD;;AACDC,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,WAAO,KAAKN,MAAL,CAAYO,MAAZ,CAAmBD,KAAnB,CAAP;AACD;;AACDE,EAAAA,aAAa,CAACF,KAAD,EAAQG,KAAK,GAAG,IAAhB,EAAsB;AACjC,QAAIC,SAAS,GAAGD,KAAhB;;AACA,QAAI,CAACA,KAAL,EAAY;AACVC,MAAAA,SAAS,GACP,KAAKV,MAAL,CAAYM,KAAZ,MAAuBR,OAAO,CAACa,QAA/B,GACEb,OAAO,CAACc,OADV,GAEEd,OAAO,CAACa,QAHZ;AAKD;;AACD,WAAO,IAAIb,OAAJ,CACL,KAAKE,MAAL,CAAYa,KAAZ,CAAkB,CAAlB,EAAqBP,KAArB,IACEI,SADF,GAEE,KAAKV,MAAL,CAAYa,KAAZ,CAAkBP,KAAK,GAAG,CAA1B,EAA6B,KAAKN,MAAL,CAAYc,MAAzC,CAHG,CAAP;AAKD;;AAvBW;;AA0BdhB,OAAO,CAACa,QAAR,GAAmB,GAAnB;AACAb,OAAO,CAACc,OAAR,GAAkB,GAAlB;AAEA,eAAed,OAAf","sourcesContent":["import Grid from './Grid.js';\n\nclass Picture {\n  constructor(pixels, width = null, height = null) {\n    this.pixels = pixels;\n    this.width = width || Grid.columns;\n    this.height = height || Grid.rows;\n  }\n  pixelAt(index) {\n    return this.pixels.charAt(index);\n  }\n  togglePixelAt(index, brush = null) {\n    let nextPixel = brush;\n    if (!brush) {\n      nextPixel = (\n        this.pixels[index] === Picture.offPixel\n        ? Picture.onPixel\n        : Picture.offPixel\n      );\n    }\n    return new Picture((\n      this.pixels.slice(0, index)\n      + nextPixel\n      + this.pixels.slice(index + 1, this.pixels.length)\n    ));\n  }\n}\n\nPicture.offPixel = '0';\nPicture.onPixel = '1';\n\nexport default Picture;"]},"metadata":{},"sourceType":"module"}