{"ast":null,"code":"var _jsxFileName = \"/home/angelica/fastfloward/week1/notes/day4/Artist/src/context/Flow.jsx\",\n    _s = $RefreshSig$();\n\n/**\n * Artist Client App uses Flow.jsk as a single point of\n * contact with the flow blockchain\n */\nimport React, { useReducer, useEffect, useCallback } from 'react';\nimport * as fcl from '@onflow/fcl';\nimport * as FlowTypes from '@onflow/types';\nimport Picture from '../model/Picture.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext({});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'setUser':\n      {\n        return { ...state,\n          user: action.payload\n        };\n      }\n\n    case 'setBalance':\n      {\n        return { ...state,\n          balance: action.payload\n        };\n      }\n\n    case 'setCollection':\n      {\n        if (action.payload) {\n          return { ...state,\n            collection: action.payload\n          };\n        } else {\n          return { ...state,\n            collection: action.payload\n          };\n        }\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction Provider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    user: null,\n    balance: null,\n    collection: undefined\n  });\n  const isReady = state.balance !== null && state.collection !== undefined;\n  const fetchBalance = useCallback(async () => {\n    if (state.user.addr && state.user.addr !== '0xLocalArtist') {\n      // A sample script execution.\n      // Query for the account's FLOW token balance.\n      const balance = await fcl.send([fcl.script`\n            import FungibleToken from 0x9a0766d93b6608b7\n            import FlowToken from 0x7e60df042a9c0868\n  \n            pub fun main(address: Address): UFix64 {\n              let vaultRef = getAccount(address)\n                .getCapability(/public/flowTokenBalance)\n                .borrow<&FlowToken.Vault{FungibleToken.Balance}>()\n                ?? panic(\"Could not borrow Balance reference to the Vault\");\n  \n              return vaultRef.balance;\n            }\n          `, fcl.args([fcl.arg(state.user.addr, FlowTypes.Address)])]).then(fcl.decode);\n      dispatch({\n        type: 'setBalance',\n        payload: balance\n      });\n    } else {\n      return dispatch({\n        type: 'setBalance',\n        payload: -42\n      });\n    }\n  }, [state.user]);\n  const createCollection = useCallback(async () => {\n    // TODO: Implement the createCollection transaction using \"fcl.send\".\n\n    /*\n    const transactionId = await fcl\n      .send([])\n      .then(fcl.decode);\n    return fcl.tx(transactionId).onceSealed();\n    */\n    return null;\n  }, []);\n  const destroyCollection = useCallback(async () => {\n    // TODO: Implement the destroyCollection.cdc transaction using \"fcl.send\".\n\n    /*\n    const transactionId = await fcl\n      .send([])\n      .then(fcl.decode);\n    return fcl.tx(transactionId).onceSealed();\n    */\n    return null;\n  }, []);\n  const fetchCollection = useCallback(async address => {\n    if (address || state.user.addr) {\n      try {\n        let args = null;\n\n        if (address) {\n          // eslint-disable-next-line\n          args = fcl.args([fcl.arg(address, FlowTypes.Address)]);\n        } else {\n          // eslint-disable-next-line\n          args = fcl.args([fcl.arg(state.user.addr, FlowTypes.Address)]);\n        } // TODO: Implement the getCollections.cdc script using \"fcl.script\", and\n        // the \"args\" in place for the script's arguments.\n        // Use the \"fetchBalance\" as an example.\n\n\n        const collection = [];\n        const mappedCollection = collection.map(serialized => new Picture(serialized.pixels, serialized.width, serialized.height));\n\n        if (address) {\n          return mappedCollection;\n        } else {\n          dispatch({\n            type: 'setCollection',\n            payload: mappedCollection\n          });\n        }\n      } catch (error) {\n        if (address) {\n          return null;\n        } else {\n          dispatch({\n            type: 'setCollection',\n            payload: null\n          });\n        }\n      }\n    }\n  }, [state.user]);\n  const printPicture = useCallback(async picture => {\n    // TODO: Implement the print.cdc transcation using \"fcl.send\".\n\n    /*\n    const transactionId = await fcl\n      .send([])\n      .then(fcl.decode);\n    return fcl.tx(transactionId).onceSealed();\n    */\n    return null;\n  }, []);\n\n  const setUser = user => {\n    dispatch({\n      type: 'setUser',\n      payload: user\n    });\n  };\n\n  const logIn = () => {\n    // TODO: Implement FCL log in.\n    fcl.logIn(); // TODO: Once implemented, remove the \"setUser\" call.\n    // setUser({\n    //   loggedIn: true,\n    //   addr: '0xLocalArtist'\n    // });\n  };\n\n  const logOut = () => {// TODO: Implement FCL log out.\n  };\n\n  useEffect(() => {\n    // TODO: Implement FCL subscription to get current user.\n    // TODO: Once implemented, remove the \"setUser\" call.\n    setUser({\n      loggedIn: null\n    });\n  }, []);\n  useEffect(() => {\n    if (state.user && state.user.addr) {\n      fetchBalance();\n      fetchCollection();\n    }\n  }, [state.user, fetchBalance, fetchCollection]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      state,\n      isReady,\n      dispatch,\n      logIn,\n      logOut,\n      fetchBalance,\n      fetchCollection,\n      createCollection,\n      destroyCollection,\n      printPicture\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Provider, \"b9cKHgeZd2mpULmX3NAN/nsibVI=\");\n\n_c = Provider;\nexport { Context as default, Provider };\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/home/angelica/fastfloward/week1/notes/day4/Artist/src/context/Flow.jsx"],"names":["React","useReducer","useEffect","useCallback","fcl","FlowTypes","Picture","Context","createContext","reducer","state","action","type","user","payload","balance","collection","Provider","props","dispatch","undefined","isReady","fetchBalance","addr","send","script","args","arg","Address","then","decode","createCollection","destroyCollection","fetchCollection","address","mappedCollection","map","serialized","pixels","width","height","error","printPicture","picture","setUser","logIn","logOut","loggedIn","children","default"],"mappings":"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","sourcesContent":["/**\n * Artist Client App uses Flow.jsk as a single point of\n * contact with the flow blockchain\n */\nimport React, {useReducer, useEffect, useCallback} from 'react';\nimport * as fcl from '@onflow/fcl';\nimport * as FlowTypes from '@onflow/types';\n\nimport Picture from '../model/Picture.js';\n\nconst Context = React.createContext({});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'setUser': {\n      return {\n        ...state,\n        user: action.payload\n      };\n    }\n    case 'setBalance': {\n      return {\n        ...state,\n        balance: action.payload\n      };\n    }\n    case 'setCollection': {\n      if (action.payload) {\n        return {\n          ...state,\n          collection: action.payload\n        };\n      } else {\n        return {\n          ...state,\n          collection: action.payload\n        };\n      }\n    }\n    default:\n      return state;\n  }\n}\n\nfunction Provider(props) {\n  const [state, dispatch] = useReducer(reducer, {\n    user: null,\n    balance: null,\n    collection: undefined\n  });\n\n  const isReady = (\n    state.balance !== null &&\n    state.collection !== undefined\n  );\n\n  const fetchBalance = useCallback(\n    async () => {\n      if (state.user.addr && state.user.addr !== '0xLocalArtist') {\n        // A sample script execution.\n        // Query for the account's FLOW token balance.\n        const balance = await fcl.send([\n          fcl.script`\n            import FungibleToken from 0x9a0766d93b6608b7\n            import FlowToken from 0x7e60df042a9c0868\n  \n            pub fun main(address: Address): UFix64 {\n              let vaultRef = getAccount(address)\n                .getCapability(/public/flowTokenBalance)\n                .borrow<&FlowToken.Vault{FungibleToken.Balance}>()\n                ?? panic(\"Could not borrow Balance reference to the Vault\");\n  \n              return vaultRef.balance;\n            }\n          `,\n          fcl.args([\n            fcl.arg(state.user.addr, FlowTypes.Address)\n          ])\n        ]).then(fcl.decode);\n\n        dispatch({type: 'setBalance', payload: balance});\n      } else {\n        return dispatch({type: 'setBalance', payload: -42});\n      }\n    },\n    [state.user]\n  );\n  const createCollection = useCallback(\n    async () => {\n        // TODO: Implement the createCollection transaction using \"fcl.send\".\n\n        /*\n        const transactionId = await fcl\n          .send([])\n          .then(fcl.decode);\n        return fcl.tx(transactionId).onceSealed();\n        */\n      \n        return null;\n    },\n    []\n  );\n  const destroyCollection = useCallback(\n    async () => {\n      // TODO: Implement the destroyCollection.cdc transaction using \"fcl.send\".\n\n      /*\n      const transactionId = await fcl\n        .send([])\n        .then(fcl.decode);\n      return fcl.tx(transactionId).onceSealed();\n      */\n\n      return null;\n    },\n    []\n  );\n  const fetchCollection = useCallback(\n    async (address) => {\n      if (address || state.user.addr) {\n        try {\n          let args = null;\n          if (address) {\n            // eslint-disable-next-line\n            args = fcl.args([\n              fcl.arg(address, FlowTypes.Address)\n            ]);\n          } else {\n            // eslint-disable-next-line\n            args = fcl.args([\n              fcl.arg(state.user.addr, FlowTypes.Address)\n            ]);\n          }\n          \n          // TODO: Implement the getCollections.cdc script using \"fcl.script\", and\n          // the \"args\" in place for the script's arguments.\n          // Use the \"fetchBalance\" as an example.\n\n          const collection = [];\n          const mappedCollection = collection.map(\n            (serialized) => new Picture(\n              serialized.pixels,\n              serialized.width,\n              serialized.height\n            )\n          );\n\n          if (address) {\n            return mappedCollection;\n          } else {\n            dispatch({type: 'setCollection', payload: mappedCollection});\n          }\n        } catch (error) {\n          if (address) {\n            return null;\n          } else {\n            dispatch({type: 'setCollection', payload: null});\n          }\n        }\n      }\n    },\n    [state.user]\n  );\n  const printPicture = useCallback(\n    async (picture) => {\n      // TODO: Implement the print.cdc transcation using \"fcl.send\".\n      \n      /*\n      const transactionId = await fcl\n        .send([])\n        .then(fcl.decode);\n      return fcl.tx(transactionId).onceSealed();\n      */\n\n      return null;\n    },\n    []\n  );\n\n  const setUser = (user) => {\n    dispatch({type: 'setUser', payload: user});\n  };\n  const logIn = () => {\n    // TODO: Implement FCL log in.\n    fcl.logIn()\n    // TODO: Once implemented, remove the \"setUser\" call.\n    // setUser({\n    //   loggedIn: true,\n    //   addr: '0xLocalArtist'\n    // });\n  };\n  const logOut = () => {\n    // TODO: Implement FCL log out.\n  };\n\n  useEffect(() => {\n    // TODO: Implement FCL subscription to get current user.\n    // TODO: Once implemented, remove the \"setUser\" call.\n    setUser({\n      loggedIn: null\n    });\n  }, []);\n\n  useEffect(() => {\n    if (state.user && state.user.addr) {\n      fetchBalance();\n      fetchCollection();\n    }\n  }, [state.user, fetchBalance, fetchCollection]);\n\n  return (\n    <Context.Provider\n      value={{\n        state,\n        isReady,\n        dispatch,\n        logIn,\n        logOut,\n        fetchBalance,\n        fetchCollection,\n        createCollection,\n        destroyCollection,\n        printPicture\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n}\n\nexport {\n  Context as default,\n  Provider\n};"]},"metadata":{},"sourceType":"module"}